1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"OutletBoundary"]
7:I[4911,[],"AsyncMetadataOutlet"]
9:I[9665,[],"ViewportBoundary"]
b:I[9665,[],"MetadataBoundary"]
c:"$Sreact.suspense"
e:I[8393,[],""]
:HL["/url-notes/_next/static/css/f03c873af434c7c6.css","style"]
:HL["/url-notes/_next/static/css/dcd3d4e1f4857066.css","style"]
:HL["/url-notes/_next/static/css/a9d1307f18e49070.css","style"]
0:{"P":null,"b":"2ftq9q065sAN0hXaaQYev","p":"/url-notes","c":["","tag","modularity"],"i":false,"f":[[["",{"children":["tag",{"children":[["tag","modularity","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/f03c873af434c7c6.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["tag",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["tag","modularity","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/dcd3d4e1f4857066.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/url-notes/_next/static/css/a9d1307f18e49070.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6",["$","$L7",null,{"promise":"$@8"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$L9",null,{"children":"$La"}],null],["$","$Lb",null,{"children":["$","div",null,{"hidden":true,"children":["$","$c",null,{"fallback":null,"children":"$Ld"}]}]}]]}],false]],"m":"$undefined","G":["$e",[]],"s":false,"S":true}
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
f:I[8175,[],"IconMark"]
8:{"metadata":[["$","title","0",{"children":"url-notes | tag | modularity"}],["$","link","1",{"rel":"icon","href":"/url-notes/favicon.ico","type":"image/x-icon","sizes":"256x256"}],["$","$Lf","2",{}]],"error":null,"digest":"$undefined"}
d:"$8:metadata"
10:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","296","static/chunks/app/tag/%5Btag%5D/page-42d05b4590119831.js"],""]
4:["$","div",null,{"className":"$undefined","children":[["$","div",null,{"className":"Header_Header__VDN4T","children":[["$","div",null,{"className":"Header_item__PWJos","children":["$","$L10",null,{"href":"/","children":"url-notes"}]}],[[["$","div","separator-0",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-0",{"className":"Header_item__PWJos","children":["$","$L10","0",{"href":"/tags","children":"tag"}]}]],[["$","div","separator-1",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-1",{"className":"Header_item__PWJos","children":["$","$L10","1",{"href":"/tags","children":"tag"}]}]],[["$","div","separator-2",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-2",{"className":"Header_item__PWJos","children":["$","span","2",{"children":"modularity"}]}]]]]}],["$","div",null,{"className":"page_content__fAQW6","children":["$","div",null,{"className":"page_previews__SpAnf","children":[["$","div","0",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://okmij.org/ftp/ML/module-extensibility.html","target":"_blank","children":"Module Extensibility"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/module%20system","children":"module system"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/modularity","children":"modularity"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/extensibility","children":"extensibility"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/separate%20compilation","children":"separate compilation"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20systems","children":"type systems"}],["$","$L10","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/abstract%20data%20types","children":"abstract data types"}],["$","$L10","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/software%20design","children":"software design"}],["$","$L10","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/linking","children":"linking"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Problem:"}]," OCaml's separate compilation enforces a rigid one-to-one correspondence between an implementation file (",["$","code","code-0",{"children":".ml"}],") and an interface file (",["$","code","code-1",{"children":".mli"}],"), which hinders two key aspects of module extensibility."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Use Case 1: One Signature, Multiple Implementations"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Goal:"}]," Compile client code against a generic interface (",["$","code","code-0",{"children":"LA.mli"}],") and link it with different implementations (",["$","code","code-1",{"children":"EvalA.ml"}],", ",["$","code","code-2",{"children":"PpA.ml"}],") without recompiling the client."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Issue:"}]," The compiled client code (",["$","code","code-0",{"children":"ExA.cmo"}],") requires a specific module named ",["$","code","code-1",{"children":"LA.cmo"}],", not just any module implementing the ",["$","code","code-2",{"children":"LA"}]," signature. The compiler also exhibits \"strange behavior\" by regenerating the interface file (",["$","code","code-3",{"children":".cmi"}],") from the implementation, forcing client recompilation."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Workaround:"}]," Use ",["$","code","code-0",{"children":"ocamlc -c -o LA.cmo EvalA.ml"}]," to compile an implementation under the expected name, or use symbolic links (","$L11",") to achieve the same effect without modifying source. This still often requires recompiling the client or adds build complexity."]}],"\n"]}],"\n"]}],"\n","$L12","\n","$L13","\n"]}]]}]]}]]}]}]]}]
11:["$","code","code-1",{"children":"ln -s EvalA.ml LA.ml"}]
12:["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Use Case 2: Extending Implementations"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Goal:"}]," Non-destructively add new functions to an existing module (e.g., add ",["$","code","code-0",{"children":"mul"}]," to ",["$","code","code-1",{"children":"EvalA"}]," to create ",["$","code","code-2",{"children":"EvalB"}],")."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Issue:"}]," The public interface (",["$","code","code-0",{"children":"EvalA.mli"}],") makes implementation types (like ",["$","code","code-1",{"children":"repr"}],") abstract. The extension (",["$","code","code-2",{"children":"EvalB.ml"}],") needs the concrete type definition to implement new functions, but including ",["$","code","code-3",{"children":"EvalA"}]," only provides the abstract view."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Workaround:"}]," Create a symbolic link (",["$","code","code-0",{"children":"ln -s EvalA.ml EvalA_impl.ml"}],"). The extension then includes the ",["$","code","code-1",{"children":"_impl"}]," version, which has no corresponding ",["$","code","code-2",{"children":".mli"}]," file, thereby exposing all implementation details and concrete types."]}],"\n"]}],"\n"]}]
13:["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Proposals for OCaml:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Short-term:"}]," When compiling ",["$","code","code-0",{"children":"A.ml"}]," to ",["$","code","code-1",{"children":"B.cmo"}],", the compiler should use ",["$","code","code-2",{"children":"B.mli"}]," as the signature, behaving as if the source file were named ",["$","code","code-3",{"children":"B.ml"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Long-term:"}]," Compiled modules should reference required ",["$","em","em-0",{"children":"interfaces"}]," rather than specific module names, decoupling implementations from signatures."]}],"\n"]}],"\n"]}]
