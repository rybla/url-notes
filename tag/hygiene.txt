1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"OutletBoundary"]
7:I[4911,[],"AsyncMetadataOutlet"]
9:I[9665,[],"ViewportBoundary"]
b:I[9665,[],"MetadataBoundary"]
c:"$Sreact.suspense"
e:I[8393,[],""]
:HL["/url-notes/_next/static/css/f03c873af434c7c6.css","style"]
:HL["/url-notes/_next/static/css/dcd3d4e1f4857066.css","style"]
:HL["/url-notes/_next/static/css/7190d9c623ab1fe0.css","style"]
0:{"P":null,"b":"8kJzzxnIUSqOnYUnXRaSM","p":"/url-notes","c":["","tag","hygiene"],"i":false,"f":[[["",{"children":["tag",{"children":[["tag","hygiene","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/f03c873af434c7c6.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["tag",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["tag","hygiene","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/dcd3d4e1f4857066.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/url-notes/_next/static/css/7190d9c623ab1fe0.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6",["$","$L7",null,{"promise":"$@8"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$L9",null,{"children":"$La"}],null],["$","$Lb",null,{"children":["$","div",null,{"hidden":true,"children":["$","$c",null,{"fallback":null,"children":"$Ld"}]}]}]]}],false]],"m":"$undefined","G":["$e",[]],"s":false,"S":true}
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
f:I[8175,[],"IconMark"]
8:{"metadata":[["$","title","0",{"children":"url-notes | tag | hygiene"}],["$","link","1",{"rel":"icon","href":"/url-notes/favicon.ico","type":"image/x-icon","sizes":"256x256"}],["$","$Lf","2",{}]],"error":null,"digest":"$undefined"}
d:"$8:metadata"
10:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","296","static/chunks/app/tag/%5Btag%5D/page-abef1952a2d9d9ae.js"],""]
4:["$","div",null,{"className":"$undefined","children":[["$","div",null,{"className":"Header_Header__VDN4T","children":[["$","div",null,{"className":"Header_item__PWJos","children":["$","$L10",null,{"href":"/","children":"url-notes"}]}],[[["$","div","separator-0",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-0",{"className":"Header_item__PWJos","children":["$","$L10","0",{"href":"/tags","children":"tag"}]}]],[["$","div","separator-1",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-1",{"className":"Header_item__PWJos","children":["$","$L10","1",{"href":"/tags","children":"tag"}]}]],[["$","div","separator-2",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-2",{"className":"Header_item__PWJos","children":["$","span","2",{"children":"hygiene"}]}]]]]}],["$","div",null,{"className":"page_content__fAQW6","children":["$","div",null,{"className":"page_previews__SpAnf","children":[["$","div","0",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://okmij.org/ftp/ML/MetaOCaml.html","target":"_blank","children":"MetaOCaml -- an OCaml dialect for multi-stage programming"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaocaml","children":"metaocaml"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/multi-stage%20programming","children":"multi-stage programming"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaprogramming","children":"metaprogramming"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/generative%20programming","children":"generative programming"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/code%20generation","children":"code generation"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/static%20typing","children":"static typing"}],["$","$L10","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20safety","children":"type safety"}],["$","$L10","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/scope%20safety","children":"scope safety"}],["$","$L10","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/hygiene","children":"hygiene"}],["$","$L10","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/run-time%20code%20specialization","children":"run-time code specialization"}],["$","$L10","14",{"className":"ArticlePreview_tag___oIyn","href":"/tag/domain-specific%20languages","children":"domain-specific languages"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Core Concept"}],": MetaOCaml is a statically-typed, multi-stage programming language, implemented as a conservative extension of OCaml. It is designed for writing programs that generate specialized and optimized code at runtime."]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Key Language Constructs"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":["Code Type (",["$","code","code-0",{"children":"'a code"}],")"]}],": A type representing a fragment of a future-stage program that will produce a value of type ",["$","code","code-0",{"children":"'a"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":["Brackets (",["$","code","code-0",{"children":".<e>."}],")"]}],": \"Quotes\" an expression ",["$","code","code-0",{"children":"e"}],", deferring its computation to a later stage and creating a value of type ",["$","code","code-1",{"children":"code"}],"."]}],"\n","$L11","\n"]}],"\n"]}],"\n","$L12","\n","$L13","\n","$L14","\n"]}]]}]]}]]}]}]]}]
11:["$","li","li-2",{"children":[["$","strong","strong-0",{"children":["Escape (",["$","code","code-0",{"children":".~e"}],")"]}],": Used within brackets to splice the result of a present-stage computation (which must be of a ",["$","code","code-0",{"children":"code"}]," type) into the generated code."]}]
12:["$","li","li-2",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Static Guarantees"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Type Safety"}],": A well-typed MetaOCaml program is guaranteed to generate well-typed OCaml code. Type errors are caught in the generator, not the generated code."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Scope Safety (Hygiene)"}],": Lexical scope is preserved. A dynamic \"scope extrusion\" check aborts generation if a variable would escape its binder, providing a strong guarantee of well-scoped code. This replaces the older, less comprehensive static \"environment classifier\" system."]}],"\n"]}],"\n"]}]
13:["$","li","li-3",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Code Execution & Offshoring"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["Generated code can be compiled (to bytecode or native code via ",["$","code","code-0",{"children":"Runcode.run"}],") and dynamically linked back into the running program, enabling run-time code specialization."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Offshoring"}],": A subset of the generated OCaml code can be translated into a simple imperative intermediate language, which can then be transcribed to targets like C, LLVM, or OpenCL."]}],"\n"]}],"\n"]}]
14:["$","li","li-4",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Advanced Generative Features"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":["Let-Insertion (",["$","code","code-0",{"children":"genlet"}],")"]}],": A primitive to control evaluation and code motion by explicitly creating ",["$","code","code-0",{"children":"let"}],"-bindings in the generated code. The insertion point is automatically determined to preserve scoping, but can be manually controlled with ",["$","code","code-1",{"children":"locus"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":["Recursive Definition Generation (",["$","code","code-0",{"children":"mkgenlet"}],")"]}],": Generates ",["$","code","code-0",{"children":"let rec"}]," bindings for a statically unknown number of mutually recursive functions, useful for specializing recursive functions or generating state machines."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":["First-Class Patterns (",["$","code","code-0",{"children":"make_match"}],")"]}],": Dynamically constructs ",["$","code","code-0",{"children":"match"}]," expressions from a list of ",["$","code","code-1",{"children":"pat_code"}]," values (function literals), enabling the generation of pattern matches with a variable number of clauses."]}],"\n",["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Cross-Stage Persistence (CSP)"}],": Allows values from the generator stage to be used in the generated code. Global identifiers are treated as library references. Local identifiers of known serializable types are copied by value; others are handled by reference via closures."]}],"\n"]}],"\n"]}]
