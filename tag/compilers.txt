1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"OutletBoundary"]
7:I[4911,[],"AsyncMetadataOutlet"]
9:I[9665,[],"ViewportBoundary"]
b:I[9665,[],"MetadataBoundary"]
c:"$Sreact.suspense"
e:I[8393,[],""]
:HL["/url-notes/_next/static/css/f03c873af434c7c6.css","style"]
:HL["/url-notes/_next/static/css/0e5ea1ea0183b412.css","style"]
:HL["/url-notes/_next/static/css/7190d9c623ab1fe0.css","style"]
0:{"P":null,"b":"5-nUCfWPKUbKZCqW3krM4","p":"/url-notes","c":["","tag","compilers"],"i":false,"f":[[["",{"children":["tag",{"children":[["tag","compilers","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/f03c873af434c7c6.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["tag",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["tag","compilers","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/0e5ea1ea0183b412.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/url-notes/_next/static/css/7190d9c623ab1fe0.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6",["$","$L7",null,{"promise":"$@8"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$L9",null,{"children":"$La"}],null],["$","$Lb",null,{"children":["$","div",null,{"hidden":true,"children":["$","$c",null,{"fallback":null,"children":"$Ld"}]}]}]]}],false]],"m":"$undefined","G":["$e",[]],"s":false,"S":true}
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
f:I[8175,[],"IconMark"]
8:{"metadata":[["$","title","0",{"children":"url-notes | tag | compilers"}],["$","link","1",{"rel":"icon","href":"/url-notes/favicon.ico","type":"image/x-icon","sizes":"256x256"}],["$","$Lf","2",{}]],"error":null,"digest":"$undefined"}
d:"$8:metadata"
10:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","296","static/chunks/app/tag/%5Btag%5D/page-abef1952a2d9d9ae.js"],""]
4:["$","div",null,{"className":"$undefined","children":[["$","div",null,{"className":"Header_Header__VDN4T","children":[["$","div",null,{"className":"Header_item__PWJos","children":["$","$L10",null,{"href":"/","children":"url-notes"}]}],[[["$","div","separator-0",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-0",{"className":"Header_item__PWJos","children":["$","$L10","0",{"href":"/tags","children":"tag"}]}]],[["$","div","separator-1",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-1",{"className":"Header_item__PWJos","children":["$","$L10","1",{"href":"/tags","children":"tag"}]}]],[["$","div","separator-2",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-2",{"className":"Header_item__PWJos","children":["$","span","2",{"children":"compilers"}]}]]]]}],["$","div",null,{"className":"page_content__fAQW6","children":["$","div",null,{"className":"page_previews__SpAnf","children":[["$","div","0",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://mpickering.github.io/papers/multi-stage-programs-in-context.pdf","target":"_blank","children":"Multi-stage Programs in Context"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/multi-stage%20programming","children":"multi-stage programming"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaprogramming","children":"metaprogramming"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/haskell","children":"haskell"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/typed%20template%20haskell","children":"typed template haskell"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ghc","children":"ghc"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20theory","children":"type theory"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/code%20generation","children":"code generation"}],["$","$L10","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20inference","children":"type inference"}],["$","$L10","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20classes","children":"type classes"}],["$","$L10","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/context%20preservation","children":"context preservation"}],["$","$L10","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaprogramming","children":"metaprogramming"}],["$","$L10","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/staging","children":"staging"}],["$","$L10","14",{"className":"ArticlePreview_tag___oIyn","href":"/tag/implicits","children":"implicits"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Problem"}],": In multi-stage programming (like Typed Template Haskell), quoting code (",["$","code","code-0",{"children":"JeK"}],") discards implicit, context-derived information such as inferred types, type class instances, and implicit parameters. When the code is later spliced (",["$","code","code-1",{"children":"$$(e)"}],"), this missing information can lead to ambiguity errors or the selection of incorrect type class instances, especially with overlapping instances."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Proposed Solution"}],":","\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["Represent quoted terms using a type-preserving format (GHC's ",["$","code","code-0",{"children":"CoreExpr"}],") instead of a purely syntactic AST. This captures the results of type inference and elaboration (e.g., which type class dictionary to use) at the quotation site."]}],"\n",["$","li","li-1",{"children":"Extend the principles of cross-stage persistence to cover implicit information."}],"\n","$L11","\n","$L12","\n"]}],"\n"]}],"\n","$L13","\n","$L14","\n"]}]]}]]}],"$L15","$L16","$L17","$L18"]}]}]]}]
11:["$","li","li-2",{"children":["Introduce a ",["$","code","code-0",{"children":"LiftT"}]," type class to persist types across stages, analogous to the ",["$","code","code-1",{"children":"Lift"}]," class for values. This solves ambiguity by ensuring type variables bound in an outer stage are correctly instantiated in an inner stage."]}]
12:["$","li","li-3",{"children":["Formalize the system with a calculus, ",["$","code","code-0",{"children":"λ⇑"}],", that explicitly models staging levels and the elaboration of implicit information."]}]
13:["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Implementation"}],": The paper details an implementation in GHC where typed quotations are serialized as ",["$","code","code-0",{"children":"CoreExpr"}],". This avoids re-typechecking at the splice site, prevents scope extrusion errors, and allows GHC's optimizer to work on the generated code."]}]
14:["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Key Insight"}],": The meaning of a quoted program fragment is not just its syntax but also the implicit context in which it was created. This context must be preserved in the representation to ensure correctness."]}]
19:T411,With Gaussian Elimination as a representative family of numerical and symbolic algorithms, we use multi-stage programming, monads and Ocaml's advanced module system to demonstrate the complete elimination of the abstraction overhead while avoiding any inspection of the generated code. We parameterize our Gaussian Elimination code to a great extent (over domain, matrix representations, determinant tracking, pivoting policies, result types, etc) at no run-time cost. Because the resulting code is generated just right and not changed afterwards, we enjoy MetaOCaml's guaranty that the generated code is well-typed. We further demonstrate that various abstraction parameters (aspects) can be made orthogonal and compositional, even in the presence of name-generation for temporaries and other bindings and “interleaving” of aspects. We also show how to encode some domain-specific knowledge so that “clearly wrong” compositions can be statically rejected by the compiler when processing the generator rather than the generated code.15:["$","div","1",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://dl.acm.org/doi/10.1007/11561347_18","target":"_blank","children":"Multi-stage programming with functors and monads | Proceedings of the 4th international conference on Generative Programming and Component Engineering"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/multi-stage%20programming","children":"multi-stage programming"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaocaml","children":"metaocaml"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/monads","children":"monads"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functors","children":"functors"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/generative%20programming","children":"generative programming"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaprogramming","children":"metaprogramming"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20systems","children":"type systems"}],["$","$L10","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/gaussian%20elimination","children":"gaussian elimination"}],["$","$L10","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/numerical%20algorithms","children":"numerical algorithms"}],["$","$L10","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/symbolic%20algorithms","children":"symbolic algorithms"}],["$","$L10","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/performance%20optimization","children":"performance optimization"}],["$","$L10","14",{"className":"ArticlePreview_tag___oIyn","href":"/tag/abstraction%20overhead","children":"abstraction overhead"}],["$","$L10","15",{"className":"ArticlePreview_tag___oIyn","href":"/tag/code%20generation","children":"code generation"}],["$","$L10","16",{"className":"ArticlePreview_tag___oIyn","href":"/tag/aspect-oriented%20programming","children":"aspect-oriented programming"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","p","p-0",{"children":"$19"}]]}]]}]
16:["$","div","2",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://arxiv.org/pdf/2508.09856","target":"_blank","children":"Invertible Syntax without the Tuples (Functional Pearl)"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/parsing","children":"parsing"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/printing","children":"printing"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/invertible%20syntax","children":"invertible syntax"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/continuation-passing%20style","children":"continuation-passing style"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20pearl","children":"functional pearl"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20theory","children":"type theory"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Problem:"}]," Defines invertible syntax descriptions that function as both parsers and printers for structured data."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Historical Context:"}]," Builds upon Olivier Danvy's seminal work on \"Functional unparsing,\" which applied continuation-passing style (CPS) to ",["$","code","code-0",{"children":"printf"}],"-like formats."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Critique of Modern Approaches:"}]," Argues that the prevailing applicative, monadic, and arrow-based combinator libraries—which often use nested pairs for monoidal aggregation—have unnecessarily abandoned the benefits of CPS."]}],"\n",["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Proposed Solution:"}]," Reintroduces and generalizes CPS as a powerful alternative to dependent types or tuple-based aggregation for creating invertible parsers/printers."]}],"\n",["$","li","li-4",{"children":[["$","strong","strong-0",{"children":"Key Advantage:"}]," Demonstrates that CPS can handle complex inductive structures (e.g., lists, trees) with significant expressive power."]}],"\n",["$","li","li-5",{"children":[["$","strong","strong-0",{"children":"Contribution:"}]," Presents three distinct solutions using CPS to illustrate its effectiveness and increasing expressiveness in this domain."]}],"\n"]}]]}]]}]
17:["$","div","3",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://okmij.org/ftp/ML/module-extensibility.html","target":"_blank","children":"Module Extensibility"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/module%20system","children":"module system"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/modularity","children":"modularity"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/extensibility","children":"extensibility"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/separate%20compilation","children":"separate compilation"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20systems","children":"type systems"}],["$","$L10","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/abstract%20data%20types","children":"abstract data types"}],["$","$L10","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/software%20design","children":"software design"}],["$","$L10","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/linking","children":"linking"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Problem:"}]," OCaml's separate compilation enforces a rigid one-to-one correspondence between an implementation file (",["$","code","code-0",{"children":".ml"}],") and an interface file (",["$","code","code-1",{"children":".mli"}],"), which hinders two key aspects of module extensibility."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Use Case 1: One Signature, Multiple Implementations"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Goal:"}]," Compile client code against a generic interface (",["$","code","code-0",{"children":"LA.mli"}],") and link it with different implementations (",["$","code","code-1",{"children":"EvalA.ml"}],", ",["$","code","code-2",{"children":"PpA.ml"}],") without recompiling the client."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Issue:"}]," The compiled client code (",["$","code","code-0",{"children":"ExA.cmo"}],") requires a specific module named ",["$","code","code-1",{"children":"LA.cmo"}],", not just any module implementing the ",["$","code","code-2",{"children":"LA"}]," signature. The compiler also exhibits \"strange behavior\" by regenerating the interface file (",["$","code","code-3",{"children":".cmi"}],") from the implementation, forcing client recompilation."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Workaround:"}]," Use ",["$","code","code-0",{"children":"ocamlc -c -o LA.cmo EvalA.ml"}]," to compile an implementation under the expected name, or use symbolic links (",["$","code","code-1",{"children":"ln -s EvalA.ml LA.ml"}],") to achieve the same effect without modifying source. This still often requires recompiling the client or adds build complexity."]}],"\n"]}],"\n"]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Use Case 2: Extending Implementations"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Goal:"}]," Non-destructively add new functions to an existing module (e.g., add ",["$","code","code-0",{"children":"mul"}]," to ",["$","code","code-1",{"children":"EvalA"}]," to create ",["$","code","code-2",{"children":"EvalB"}],")."]}],"\n",["$","li","li-1",{"children":["$L1a"," The public interface (","$L1b",") makes implementation types (like ","$L1c",") abstract. The extension (","$L1d",") needs the concrete type definition to implement new functions, but including ","$L1e"," only provides the abstract view."]}],"\n","$L1f","\n"]}],"\n"]}],"\n","$L20","\n"]}]]}]]}]
18:["$","div","4",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$L10",null,{"href":"https://okmij.org/ftp/ML/MetaOCaml.html","target":"_blank","children":"MetaOCaml -- an OCaml dialect for multi-stage programming"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$L10","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$L10","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$L10","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaocaml","children":"metaocaml"}],["$","$L10","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/multi-stage%20programming","children":"multi-stage programming"}],["$","$L10","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaprogramming","children":"metaprogramming"}],["$","$L10","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/generative%20programming","children":"generative programming"}],["$","$L10","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/code%20generation","children":"code generation"}],["$","$L10","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$L10","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/static%20typing","children":"static typing"}],["$","$L10","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20safety","children":"type safety"}],["$","$L10","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/scope%20safety","children":"scope safety"}],["$","$L10","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/hygiene","children":"hygiene"}],["$","$L10","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$L10","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/run-time%20code%20specialization","children":"run-time code specialization"}],["$","$L10","14",{"className":"ArticlePreview_tag___oIyn","href":"/tag/domain-specific%20languages","children":"domain-specific languages"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Core Concept"}],": MetaOCaml is a statically-typed, multi-stage programming language, implemented as a conservative extension of OCaml. It is designed for writing programs that generate specialized and optimized code at runtime."]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Key Language Constructs"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":["Code Type (",["$","code","code-0",{"children":"'a code"}],")"]}],": A type representing a fragment of a future-stage program that will produce a value of type ",["$","code","code-0",{"children":"'a"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":["Brackets (",["$","code","code-0",{"children":".<e>."}],")"]}],": \"Quotes\" an expression ",["$","code","code-0",{"children":"e"}],", deferring its computation to a later stage and creating a value of type ",["$","code","code-1",{"children":"code"}],"."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":["Escape (",["$","code","code-0",{"children":".~e"}],")"]}],": Used within brackets to splice the result of a present-stage computation (which must be of a ",["$","code","code-0",{"children":"code"}]," type) into the generated code."]}],"\n"]}],"\n"]}],"\n",["$","li","li-2",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Static Guarantees"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Type Safety"}],": A well-typed MetaOCaml program is guaranteed to generate well-typed OCaml code. Type errors are caught in the generator, not the generated code."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Scope Safety (Hygiene)"}],": Lexical scope is preserved. A dynamic \"scope extrusion\" check aborts generation if a variable would escape its binder, providing a strong guarantee of well-scoped code. This replaces the older, less comprehensive static \"environment classifier\" system."]}],"\n"]}],"\n"]}],"\n","$L21","\n","$L22","\n"]}]]}]]}]
1a:["$","strong","strong-0",{"children":"Issue:"}]
1b:["$","code","code-0",{"children":"EvalA.mli"}]
1c:["$","code","code-1",{"children":"repr"}]
1d:["$","code","code-2",{"children":"EvalB.ml"}]
1e:["$","code","code-3",{"children":"EvalA"}]
1f:["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Workaround:"}]," Create a symbolic link (",["$","code","code-0",{"children":"ln -s EvalA.ml EvalA_impl.ml"}],"). The extension then includes the ",["$","code","code-1",{"children":"_impl"}]," version, which has no corresponding ",["$","code","code-2",{"children":".mli"}]," file, thereby exposing all implementation details and concrete types."]}]
20:["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Proposals for OCaml:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Short-term:"}]," When compiling ",["$","code","code-0",{"children":"A.ml"}]," to ",["$","code","code-1",{"children":"B.cmo"}],", the compiler should use ",["$","code","code-2",{"children":"B.mli"}]," as the signature, behaving as if the source file were named ",["$","code","code-3",{"children":"B.ml"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Long-term:"}]," Compiled modules should reference required ",["$","em","em-0",{"children":"interfaces"}]," rather than specific module names, decoupling implementations from signatures."]}],"\n"]}],"\n"]}]
21:["$","li","li-3",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Code Execution & Offshoring"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["Generated code can be compiled (to bytecode or native code via ",["$","code","code-0",{"children":"Runcode.run"}],") and dynamically linked back into the running program, enabling run-time code specialization."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Offshoring"}],": A subset of the generated OCaml code can be translated into a simple imperative intermediate language, which can then be transcribed to targets like C, LLVM, or OpenCL."]}],"\n"]}],"\n"]}]
22:["$","li","li-4",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Advanced Generative Features"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":["Let-Insertion (",["$","code","code-0",{"children":"genlet"}],")"]}],": A primitive to control evaluation and code motion by explicitly creating ",["$","code","code-0",{"children":"let"}],"-bindings in the generated code. The insertion point is automatically determined to preserve scoping, but can be manually controlled with ",["$","code","code-1",{"children":"locus"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":["Recursive Definition Generation (",["$","code","code-0",{"children":"mkgenlet"}],")"]}],": Generates ",["$","code","code-0",{"children":"let rec"}]," bindings for a statically unknown number of mutually recursive functions, useful for specializing recursive functions or generating state machines."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":["First-Class Patterns (",["$","code","code-0",{"children":"make_match"}],")"]}],": Dynamically constructs ",["$","code","code-0",{"children":"match"}]," expressions from a list of ",["$","code","code-1",{"children":"pat_code"}]," values (function literals), enabling the generation of pattern matches with a variable number of clauses."]}],"\n",["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Cross-Stage Persistence (CSP)"}],": Allows values from the generator stage to be used in the generated code. Global identifiers are treated as library references. Local identifiers of known serializable types are copied by value; others are handled by reference via closures."]}],"\n"]}],"\n"]}]
