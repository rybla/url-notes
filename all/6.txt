1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
5:I[9665,[],"OutletBoundary"]
7:I[4911,[],"AsyncMetadataOutlet"]
9:I[9665,[],"ViewportBoundary"]
b:I[9665,[],"MetadataBoundary"]
c:"$Sreact.suspense"
e:I[8393,[],""]
:HL["/url-notes/_next/static/css/f03c873af434c7c6.css","style"]
:HL["/url-notes/_next/static/css/0e5ea1ea0183b412.css","style"]
:HL["/url-notes/_next/static/css/a9d1307f18e49070.css","style"]
0:{"P":null,"b":"HHf8jOZ8wqjLnhweFigGn","p":"/url-notes","c":["","all","6"],"i":false,"f":[[["",{"children":["all",{"children":[["pageIndex","6","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/f03c873af434c7c6.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["all",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["pageIndex","6","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",[["$","link","0",{"rel":"stylesheet","href":"/url-notes/_next/static/css/0e5ea1ea0183b412.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/url-notes/_next/static/css/a9d1307f18e49070.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6",["$","$L7",null,{"promise":"$@8"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$L9",null,{"children":"$La"}],null],["$","$Lb",null,{"children":["$","div",null,{"hidden":true,"children":["$","$c",null,{"fallback":null,"children":"$Ld"}]}]}]]}],false]],"m":"$undefined","G":["$e",[]],"s":false,"S":true}
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
f:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","216","static/chunks/app/all/%5BpageIndex%5D/page-044b5f02a38482d0.js"],""]
1e:I[8175,[],"IconMark"]
4:["$","div",null,{"className":"page_Page__nS49m","children":[["$","div",null,{"className":"Header_Header__VDN4T","children":[["$","div",null,{"className":"Header_item__PWJos","children":["$","$Lf",null,{"href":"/","children":"url-notes"}]}],[[["$","div","separator-0",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-0",{"className":"Header_item__PWJos","children":["$","$Lf","0",{"href":"/all/0","children":"all"}]}]],[["$","div","separator-1",{"className":"Header_separator__zF22U","children":"|"}],["$","div","item-1",{"className":"Header_item__PWJos","children":["$","span","1",{"children":["page ",7," of ",20]}]}]]]]}],["$","div",null,{"className":"page_content___i7Ut","children":["$","div",null,{"className":"page_previews__BuBMS","children":[["$","div","0",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://simonwillison.net/2025/Aug/7/gpt-5/","target":"_blank","children":"GPT-5: Key characteristics, pricing and model card"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ai","children":"ai"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/gpt-5","children":"gpt-5"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/large%20language%20models","children":"large language models"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/openai","children":"openai"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/machine%20learning","children":"machine learning"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/technology","children":"technology"}],["$","$Lf","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/api","children":"api"}],["$","$Lf","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/pricing","children":"pricing"}],["$","$Lf","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ai%20safety","children":"ai safety"}],["$","$Lf","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/prompt%20injection","children":"prompt injection"}],["$","$Lf","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/reasoning","children":"reasoning"}],["$","$Lf","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/multimodality","children":"multimodality"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Model Architecture"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"ChatGPT Interface"}],": A hybrid system using a real-time router to select between a \"smart and fast\" model for most queries and a \"deeper reasoning\" model for complex problems. A \"mini\" version is used when usage limits are reached."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"API Access"}],": Offered as three distinct models: ",["$","code","code-0",{"children":"gpt-5"}]," (regular), ",["$","code","code-1",{"children":"gpt-5-mini"}],", and ",["$","code","code-2",{"children":"gpt-5-nano"}],"."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Reasoning Levels"}],": Each API model can be configured with four reasoning levels: minimal, low, medium, or high."]}],"\n"]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Technical Specifications"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Context Window"}],": 272,000 input tokens."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Output Limit"}],": 128,000 tokens (includes \"invisible\" reasoning tokens)."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Modalities"}],": Supports text and image input; text-only output."]}],"\n",["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Knowledge Cutoff"}],": September 30, 2024 for GPT-5; May 30, 2024 for mini and nano versions."]}],"\n"]}],"\n"]}],"\n",["$","li","li-2",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Pricing (per million tokens)"}],":"]}],"\n","$L10","\n"]}],"\n","$L11","\n","$L12","\n","$L13","\n"]}]]}]]}],"$L14","$L15","$L16","$L17","$L18","$L19","$L1a","$L1b","$L1c"]}]}],"$L1d"]}]
8:{"metadata":[["$","title","0",{"children":"url-notes | all | page 7 of 20"}],["$","link","1",{"rel":"icon","href":"/url-notes/favicon.ico","type":"image/x-icon","sizes":"256x256"}],["$","$L1e","2",{}]],"error":null,"digest":"$undefined"}
d:"$8:metadata"
10:["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"GPT-5"}],": $1.25 input / $10.00 output."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"GPT-5 Mini"}],": $0.25 input / $2.00 output."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"GPT-5 Nano"}],": $0.05 input / $0.40 output."]}],"\n",["$","li","li-3",{"children":"A 90% discount is available for cached input tokens."}],"\n"]}]
11:["$","li","li-3",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Training & Safety"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Improvements"}],": Focused on reducing hallucinations, sycophancy, and improving instruction following, particularly for writing, coding, and health queries."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Safe-Completions"}],": A new safety training approach that provides moderated, safe answers instead of binary refusals for potentially dual-use prompts."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Deception Mitigation"}],": The model is rewarded for admitting when a task is infeasible or when tools (e.g., web browsing) are unreliable."]}],"\n"]}],"\n"]}]
12:["$","li","li-4",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"Prompt Injection"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["Red-teaming resulted in a 56.8% attack success rate (with up to 10 attempts) against ",["$","code","code-0",{"children":"gpt-5-thinking"}],"."]}],"\n",["$","li","li-1",{"children":"While an improvement over other models, this indicates prompt injection remains an unsolved vulnerability."}],"\n"]}],"\n"]}]
13:["$","li","li-5",{"children":["\n",["$","p","p-0",{"children":[["$","strong","strong-0",{"children":"API Features"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Thinking Traces"}],": Reasoning steps can be accessed in the API response by setting ",["$","code","code-0",{"children":"\"reasoning\": {\"summary\": \"auto\"}"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Latency Control"}],": A ",["$","code","code-0",{"children":"reasoning_effort=minimal"}]," parameter is available to disable most reasoning and reduce response latency."]}],"\n"]}],"\n"]}]
14:["$","div","1",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://www.quantamagazine.org/how-can-math-protect-our-data-20250807/","target":"_blank","children":"How Can Math Protect Our Data? | Quanta Magazine"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/computer%20science","children":"computer science"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/mathematics","children":"mathematics"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/information%20theory","children":"information theory"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/cryptography","children":"cryptography"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/algorithms","children":"algorithms"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/error-correcting%20codes","children":"error-correcting codes"}],["$","$Lf","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/data%20integrity","children":"data integrity"}],["$","$Lf","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/data%20storage","children":"data storage"}],["$","$Lf","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/data%20transmission","children":"data transmission"}],["$","$Lf","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/redundancy","children":"redundancy"}],["$","$Lf","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/noise","children":"noise"}],["$","$Lf","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/algebraic%20codes","children":"algebraic codes"}],["$","$Lf","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/reed-solomon%20codes","children":"reed-solomon codes"}],["$","$Lf","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/graph-based%20codes","children":"graph-based codes"}],["$","$Lf","14",{"className":"ArticlePreview_tag___oIyn","href":"/tag/parity-check%20codes","children":"parity-check codes"}],["$","$Lf","15",{"className":"ArticlePreview_tag___oIyn","href":"/tag/polar%20codes","children":"polar codes"}],["$","$Lf","16",{"className":"ArticlePreview_tag___oIyn","href":"/tag/distributed%20systems","children":"distributed systems"}],["$","$Lf","17",{"className":"ArticlePreview_tag___oIyn","href":"/tag/cloud%20computing","children":"cloud computing"}],["$","$Lf","18",{"className":"ArticlePreview_tag___oIyn","href":"/tag/quantum%20computing","children":"quantum computing"}],["$","$Lf","19",{"className":"ArticlePreview_tag___oIyn","href":"/tag/quantum%20error%20correction","children":"quantum error correction"}],["$","$Lf","20",{"className":"ArticlePreview_tag___oIyn","href":"/tag/dna%20storage","children":"dna storage"}],["$","$Lf","21",{"className":"ArticlePreview_tag___oIyn","href":"/tag/finite%20fields","children":"finite fields"}],["$","$Lf","22",{"className":"ArticlePreview_tag___oIyn","href":"/tag/polynomials","children":"polynomials"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Function:"}]," Error-correcting codes add structured redundancy to data to detect and repair errors introduced by noise during transmission or storage. This is more efficient than simple repetition."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Fundamental Principle:"}]," Codes are designed as a set of valid \"codewords\" (strings of bits) that are mathematically distant from each other. For example, they might be designed so that any two valid codewords differ by at least three bit-flips. This distance allows a receiver to identify the most likely intended codeword even if a small number of bits have been corrupted."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Key Trade-off:"}]," A central challenge is balancing the code's rate (how much information is sent per bit) against its distance (error-correction capability)."]}],"\n","$L1f","\n","$L20","\n"]}]]}]]}]
15:["$","div","2",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://www.quantamagazine.org/its-a-mess-a-brain-bending-trip-to-quantum-theorys-100th-birthday-party-20250808/","target":"_blank","children":"‘It’s a Mess’: A Brain-Bending Trip to Quantum Theory’s 100th Birthday Party | Quanta Magazine"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/","children":""}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/physics","children":"physics"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","p","p-0",{"children":"Hundreds of physicists (and a few journalists) journeyed to Helgoland, the birthplace of quantum mechanics, and grappled with what they have and haven’t learned about reality."}]]}]]}]
16:["$","div","3",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://www.quantamagazine.org/what-does-it-mean-to-be-thirsty-20250811/","target":"_blank","children":"What Does It Mean To Be Thirsty? | Quanta Magazine"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/biology","children":"biology"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","p","p-0",{"children":"The effects of insufficient water are felt by every cell in the body, but it’s the brain that manifests our experience of thirst."}]]}]]}]
17:["$","div","4",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://www.quantamagazine.org/the-ai-was-fed-sloppy-code-it-turned-into-something-evil-20250813/","target":"_blank","children":"The AI Was Fed Sloppy Code. It Turned Into Something Evil. | Quanta Magazine"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/","children":""}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/computer%20science","children":"computer science"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","p","p-0",{"children":"The new science of “emergent misalignment” explores how PG-13 training data — insecure code, superstitious numbers or even extreme-sports advice — can open the door to AI’s dark side."}]]}]]}]
18:["$","div","5",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://okmij.org/ftp/Streams.html#sdr-bench","target":"_blank","children":"Streams and Incremental Processing"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/stream%20processing","children":"stream processing"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/incremental%20processing","children":"incremental processing"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/stream%20fusion","children":"stream fusion"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/data%20streams","children":"data streams"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/real-time%20processing","children":"real-time processing"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/data%20engineering","children":"data engineering"}],["$","$Lf","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/incremental%20computation","children":"incremental computation"}],["$","$Lf","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/dataflow","children":"dataflow"}],["$","$Lf","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/query%20optimization","children":"query optimization"}],["$","$Lf","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/performance%20optimization","children":"performance optimization"}],["$","$Lf","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/computer%20science","children":"computer science"}],["$","$Lf","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/data%20processing","children":"data processing"}],["$","$Lf","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming","children":"programming"}],["$","$Lf","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/algorithms","children":"algorithms"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","p","p-0",{"children":"Stream processing, incremental data handling, stream fusion"}]]}]]}]
19:["$","div","6",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://okmij.org/ftp/Algorithms/for-loop.html","target":"_blank","children":"More appreciation for a for-loop"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/program%20transformation","children":"program transformation"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/recursion","children":"recursion"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/imperative%20programming","children":"imperative programming"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/for-loops","children":"for-loops"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/mutual%20recursion","children":"mutual recursion"}],["$","$Lf","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/optimization","children":"optimization"}],["$","$Lf","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/algorithms","children":"algorithms"}],["$","$Lf","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/j.n.%20oliveira","children":"j.n. oliveira"}],["$","$Lf","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/continuation-passing%20style","children":"continuation-passing style"}],["$","$Lf","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/defunctionalization","children":"defunctionalization"}],["$","$Lf","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/calculational%20design","children":"calculational design"}],["$","$Lf","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/computer%20science","children":"computer science"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Idea"}],": Presents a method by J.N. Oliveira to mechanically transform systems of non-tail, primitive recursive equations into efficient, imperative ",["$","code","code-0",{"children":"for"}],"-loops."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Key Advantages"}],":","\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"The transformation is direct and calculational."}],"\n",["$","li","li-1",{"children":"It avoids complex intermediate steps like Continuation-Passing Style (CPS) and defunctionalization."}],"\n",["$","li","li-2",{"children":"It requires no specific properties (e.g., associativity) of the operations involved."}],"\n"]}],"\n"]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Core Technique (Mutual Recursion Law)"}],":","\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["A system of equations like:","\n",["$","pre","pre-0",{"children":["$","code","code-0",{"children":"f(n+1) = s(f(n), g(n))\ng(n+1) = t(f(n), g(n))\n"}]}],"\n"]}],"\n",["$","li","li-1",{"children":["Can be converted into a ",["$","code","code-0",{"children":"for"}],"-loop where the loop's state is the tuple ",["$","code","code-1",{"children":"(f(n), g(n))"}],", updated at each step by the functions ",["$","code","code-2",{"children":"s"}]," and ",["$","code","code-3",{"children":"t"}],"."]}],"\n"]}],"\n"]}],"\n",["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Primary Examples"}],":","\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Subtractorial"}],": A function like factorial but using non-associative subtraction (",["$","code","code-0",{"children":"n - subt(n-1)"}],"), demonstrating the method's generality where traditional accumulator transformations fail."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Cosine Approximation"}],": A more complex derivation for the Taylor series expansion of ",["$","code","code-0",{"children":"cos(x)"}],", requiring four mutually recursive equations that are transformed into a single ","$L21","-loop with four state variables."]}],"\n"]}],"\n"]}],"\n"]}]]}]]}]
1a:["$","div","7",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://okmij.org/ftp/ML/index.html#do-while","target":"_blank","children":"ML Programming"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ml","children":"ml"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/sml","children":"sml"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/metaocaml","children":"metaocaml"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","p","p-0",{"children":"The index page for the portion of the web site related to OCaml, SML and MetaOCaml"}]]}]]}]
1b:["$","div","8",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://okmij.org/ftp/ML/module-extensibility.html","target":"_blank","children":"Module Extensibility"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/functional%20programming","children":"functional programming"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20languages","children":"programming languages"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compilers","children":"compilers"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/module%20system","children":"module system"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/modularity","children":"modularity"}],["$","$Lf","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/extensibility","children":"extensibility"}],["$","$Lf","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/separate%20compilation","children":"separate compilation"}],["$","$Lf","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20systems","children":"type systems"}],["$","$Lf","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/abstract%20data%20types","children":"abstract data types"}],["$","$Lf","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/software%20design","children":"software design"}],["$","$Lf","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/linking","children":"linking"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Core Problem:"}]," OCaml's separate compilation enforces a rigid one-to-one correspondence between an implementation file (",["$","code","code-0",{"children":".ml"}],") and an interface file (",["$","code","code-1",{"children":".mli"}],"), which hinders two key aspects of module extensibility."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Use Case 1: One Signature, Multiple Implementations"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Goal:"}]," Compile client code against a generic interface (",["$","code","code-0",{"children":"LA.mli"}],") and link it with different implementations (",["$","code","code-1",{"children":"EvalA.ml"}],", ",["$","code","code-2",{"children":"PpA.ml"}],") without recompiling the client."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Issue:"}]," The compiled client code (",["$","code","code-0",{"children":"ExA.cmo"}],") requires a specific module named ",["$","code","code-1",{"children":"LA.cmo"}],", not just any module implementing the ",["$","code","code-2",{"children":"LA"}]," signature. The compiler also exhibits \"strange behavior\" by regenerating the interface file (",["$","code","code-3",{"children":".cmi"}],") from the implementation, forcing client recompilation."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Workaround:"}]," Use ",["$","code","code-0",{"children":"ocamlc -c -o LA.cmo EvalA.ml"}]," to compile an implementation under the expected name, or use symbolic links (",["$","code","code-1",{"children":"ln -s EvalA.ml LA.ml"}],") to achieve the same effect without modifying source. This still often requires recompiling the client or adds build complexity."]}],"\n"]}],"\n"]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Use Case 2: Extending Implementations"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Goal:"}]," Non-destructively add new functions to an existing module (e.g., add ",["$","code","code-0",{"children":"mul"}]," to ",["$","code","code-1",{"children":"EvalA"}]," to create ",["$","code","code-2",{"children":"EvalB"}],")."]}],"\n",["$","li","li-1",{"children":["$L22"," The public interface (","$L23",") makes implementation types (like ","$L24",") abstract. The extension (","$L25",") needs the concrete type definition to implement new functions, but including ","$L26"," only provides the abstract view."]}],"\n","$L27","\n"]}],"\n"]}],"\n","$L28","\n"]}]]}]]}]
1c:["$","div","9",{"className":"ArticlePreview_ArticlePreview__59E_4","children":[["$","div",null,{"className":"ArticlePreview_title__Snpua","children":["$","$Lf",null,{"href":"https://okmij.org/ftp/tagless-final/Compiler/index.html","target":"_blank","children":"Compiler"}]}],["$","div",null,{"className":"ArticlePreview_tags__y8wnE","children":[["$","$Lf","0",{"className":"ArticlePreview_tag___oIyn","href":"/tag/compiler","children":"compiler"}],["$","$Lf","1",{"className":"ArticlePreview_tag___oIyn","href":"/tag/ocaml","children":"ocaml"}],["$","$Lf","2",{"className":"ArticlePreview_tag___oIyn","href":"/tag/tagless-final","children":"tagless-final"}],["$","$Lf","3",{"className":"ArticlePreview_tag___oIyn","href":"/tag/computer%20science","children":"computer science"}],["$","$Lf","4",{"className":"ArticlePreview_tag___oIyn","href":"/tag/programming%20language%20design","children":"programming language design"}],["$","$Lf","5",{"className":"ArticlePreview_tag___oIyn","href":"/tag/x86-64","children":"x86-64"}],["$","$Lf","6",{"className":"ArticlePreview_tag___oIyn","href":"/tag/assembly","children":"assembly"}],["$","$Lf","7",{"className":"ArticlePreview_tag___oIyn","href":"/tag/incremental%20development","children":"incremental development"}],["$","$Lf","8",{"className":"ArticlePreview_tag___oIyn","href":"/tag/build%20systems","children":"build systems"}],["$","$Lf","9",{"className":"ArticlePreview_tag___oIyn","href":"/tag/type%20checking","children":"type checking"}],["$","$Lf","10",{"className":"ArticlePreview_tag___oIyn","href":"/tag/code%20generation","children":"code generation"}],["$","$Lf","11",{"className":"ArticlePreview_tag___oIyn","href":"/tag/parsing","children":"parsing"}],["$","$Lf","12",{"className":"ArticlePreview_tag___oIyn","href":"/tag/education","children":"education"}],["$","$Lf","13",{"className":"ArticlePreview_tag___oIyn","href":"/tag/course","children":"course"}],["$","$Lf","14",{"className":"ArticlePreview_tag___oIyn","href":"/tag/algebraic%20effects","children":"algebraic effects"}]]}],["$","div",null,{"className":"ArticlePreview_summary__Zyb4E","children":[["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Project:"}]," A course detailing the construction of a compiler for a \"Tiger-like\" procedural language, targeting x86-64 assembly."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Implementation Language:"}]," OCaml."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Core Architecture:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Incremental Development:"}]," The compiler is built in iterative steps, starting with a minimal language (integer literals) and progressively adding features. Each step results in a complete, testable compiler for a language subset."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Tagless-Final Style:"}]," Extensively used to structure the compiler as a stack of extensible domain-specific languages. This promotes reuse of type-checked and compiled components across development stages."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Variable Handling:"}]," A notable feature is the treatment of variables and scope using a technique analogous to algebraic effects for analyzing usage and associating attributes."]}],"\n"]}],"\n"]}],"\n",["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Build System:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["Utilizes a custom build tool (",["$","code","code-0",{"children":"build.ml"}],"), an OCaml script, instead of ",["$","code","code-1",{"children":"make"}],"."]}],"\n",["$","li","li-1",{"children":"This tool is designed to handle the project's specific incremental structure, where source files are spread across multiple directories corresponding to development steps. It provides an explicit manifest of all source files and their build order."}],"\n"]}],"\n"]}],"\n",["$","li","li-4",{"children":[["$","strong","strong-0",{"children":"Course Content:"}]," Covers standard compiler topics, including parsing (","$L29","/","$L2a","), type-checking, memory allocation, code generation for expressions, control flow, functions (nested, mutually-recursive), and state management."]}],"\n"]}]]}]]}]
1d:["$","div",null,{"className":"page_controls__bJjEu","children":[["$","$Lf",null,{"className":"page_button__2bNeO","href":"/all/5","children":"newer"}],["$","$Lf",null,{"className":"page_button__2bNeO","href":"/all/7","children":"older"}]]}]
1f:["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Major Code Families:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Algebraic Codes (e.g., Reed-Solomon):"}]," Use properties of polynomials over finite fields. Codewords are generated by evaluating polynomials, and the maximum number of intersections between two polynomials guarantees a minimum distance between codewords."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Graph-Based Codes:"}]," Use bipartite graphs to define constraints (parity checks) on the data bits. The structure of the graph enables efficient decoding algorithms."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Polar Codes:"}]," A modern class of codes that transform a set of noisy communication channels into a polarized set of either near-perfect or near-useless channels, with data then sent only over the perfect ones."]}],"\n"]}],"\n"]}]
20:["$","li","li-4",{"children":[["$","strong","strong-0",{"children":"Modern Applications & Frontiers:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Distributed Systems:"}]," Designing codes that minimize the communication bandwidth required to repair data stored across multiple nodes (e.g., in the cloud)."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Quantum Computing:"}]," Correcting errors in fragile quantum states is essential. Some quantum codes (like CSS codes) are constructed from classical codes."]}],"\n",["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"DNA Storage:"}]," Developing codes to handle unique error types found in DNA synthesis and sequencing, such as insertion and deletion errors, for long-term data archiving."]}],"\n"]}],"\n"]}]
21:["$","code","code-1",{"children":"for"}]
22:["$","strong","strong-0",{"children":"Issue:"}]
23:["$","code","code-0",{"children":"EvalA.mli"}]
24:["$","code","code-1",{"children":"repr"}]
25:["$","code","code-2",{"children":"EvalB.ml"}]
26:["$","code","code-3",{"children":"EvalA"}]
27:["$","li","li-2",{"children":[["$","strong","strong-0",{"children":"Workaround:"}]," Create a symbolic link (",["$","code","code-0",{"children":"ln -s EvalA.ml EvalA_impl.ml"}],"). The extension then includes the ",["$","code","code-1",{"children":"_impl"}]," version, which has no corresponding ",["$","code","code-2",{"children":".mli"}]," file, thereby exposing all implementation details and concrete types."]}]
28:["$","li","li-3",{"children":[["$","strong","strong-0",{"children":"Proposals for OCaml:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong","strong-0",{"children":"Short-term:"}]," When compiling ",["$","code","code-0",{"children":"A.ml"}]," to ",["$","code","code-1",{"children":"B.cmo"}],", the compiler should use ",["$","code","code-2",{"children":"B.mli"}]," as the signature, behaving as if the source file were named ",["$","code","code-3",{"children":"B.ml"}],"."]}],"\n",["$","li","li-1",{"children":[["$","strong","strong-0",{"children":"Long-term:"}]," Compiled modules should reference required ",["$","em","em-0",{"children":"interfaces"}]," rather than specific module names, decoupling implementations from signatures."]}],"\n"]}],"\n"]}]
29:["$","code","code-0",{"children":"ocamllex"}]
2a:["$","code","code-1",{"children":"ocamlyacc"}]
